/* VM LIB */

exports = async () => {
	return {
		sendCommand:_os.___k().sendCommand,
		listenEvent:_os.___k().listenEvent,
		unlistenEvent:_os.___k().unlistenEvent,
		doEvent:_os.___k().doEvent,
		getBoot:()=>_os.___k().getVar("boot_storage"),
		getInterfaces: async () => {
			const getMainList = () => new Promise(res=>_os.___k().sendCommand("vm/interfaces",null,		(el)=>{
				res(el);
			}))
			const getSubList = (type,name) => new Promise(res=>_os.___k().sendCommand(`interfaces/${type}/${name}/interfaceList`,null,		(el)=>{
				res(el);
			}))
			const list = await getMainList();
			if (list?.length) {
				for (let k in list) {
					let i = list[k];
					i.interfaces = await getSubList(i.type,i.name);
					list[k] = i;
				}
			};
			return list;
		},
		commands: {
			reg: (path,handler,ctx) => new Promise(res=>
				_os.___k().sendCommand("vm/commands/reg",{path,handler,ctx}, (el)=>{
					res(el);
				})),
			regCat: (path) => new Promise(res=>
				_os.___k().sendCommand("vm/commands/regCat",{path}, (el)=>{
					res(el);
				})),
			doEvent:(event,data)=>_os.___k().sendCommand("vm/commands/doEvent",{event,data})
		}
	};
}